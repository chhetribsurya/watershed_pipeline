#!/usr/bin/env nextflow

// nextflow.config

manifest {
    name = 'RareVariant-Project'
    author = 'Surya B. Chhetri'
    description = 'Nextflow Based Rare-variant Watershed Pipeline'
    mainScript = 'main.nf'
    version = '1.0.3'
}


/*
========================================================================================
    Include integrate modular config files
========================================================================================
*/

includeConfig './conf/params.config'
includeConfig './conf/base.config' // default base resource settings
includeConfig './conf/labels.config' // label resource settings

// specific base resources, label and process resources with -profile run
profiles {

    local {
      includeConfig './conf/local.config'
    }

    slurm {
        //includeConfig './conf/slurm.config'
        process {
            executor = 'slurm'
            queue = 'shared'
            time = { 4.h * task.attempt }
            memory = { 8.GB * task.attempt }
            cpus = { Math.min(8, 2 * task.attempt) }
            maxRetries = 3
            penv = 'smp'
            beforeScript = 'ml java/19'
        }
    }

    sge { 
     includeConfig './conf/sge.config'
    }

    awsbatch {
      includeConfig './conf/awsbatch.config'
    }

    docker {
        process.container = 'biocontainers/samtools'
        docker.enabled = true 
    }

    singularity {
        singularity.cacheDir = "${params.cache_dir}/singularitycache"
        singularity.enabled = true
        singularity.autoMounts = true
        runOptions = '--pull=always'
        //process.container = 'docker://bryancquach/peer:1.3'
        //singularity.libraryDir = "${params.cache_dir}/singularitycache/cachelib"
    }
    
    conda { 
        //includeConfig 'conf/conda.config'
        conda.enabled=true
        conda.useMamba=true
        conda.cacheDir="${params.cache_dir}/condacache"

        /*process {
            withName: 'process_data' {
                conda = "${params.watershed_pyenv}"
            }
        }*/
 
    }

    retry {
     includeConfig './conf/retry.config'
    }

}

profiles {
    conda_and_singularity {
        conda {
            enabled = true
            useMamba = true
            cacheDir = "${params.conda_cache_dir}"
        }
        singularity {
            enabled = true
            cacheDir = "${params.singularity_cache_dir}"
            autoMounts = true
            runOptions = '--cleanenv'
        }
    }
}

/*
==================================================================================================================
    Default: General Custom setup for conda/docker/singularity container (instead of -profile singularity option)
==================================================================================================================
*/

singularity {
     enabled=true
     cacheDir="${params.cache_dir}/singularitycache"
     //cacheDir="${params.cache_dir}/singularity-vepcache-test"
     autoMounts=true
     runOptions = '--cleanenv'
}

process {

    withLabel: vep_docker_env  {
        module = ['java/19', 'samtools/1.15.1']
        container = 'docker://ensemblorg/ensembl-vep'
        conda = './env_ymls/watershed_env.yml'
        containerOptions = "--bind ${params.cachedir_vep}:/vepcache"

        //containerOptions = { workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g)': null}
        //conda = "${params.watershed_env}"

        }

    /*withLabel: vep_docker_env  {
        module = ['java/19', 'samtools/1.15.1']
        container = 'docker://ensemblorg/ensembl-vep'
        conda = './env_ymls/watershed_env.yml'  // Path to the Conda environment file
        //containerOptions = { workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g)': null}
        containerOptions = "--bind ${params.cachedir_vep}/output:/vepcache"

        //containerOptions = { workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g)': null}
        //conda = "${params.watershed_env}"

        }*/

    withName: build_vep_cache {
        //conda = "${params.watershed_env}"
        //container = 'docker://ensemblorg/ensembl-vep'

        executor = 'slurm'
        cpus = 3
        memory = '10 GB'
        time = '3 h'
        
    }

    /*withName: call_vep_annotation_final {
        //conda = "${params.watershed_env}"
        //container = 'docker://ensemblorg/ensembl-vep'

        executor = 'slurm'
        cpus = 3
        memory = '10 GB'
        time = '3 h'
        
        //clusterOptions =  '-N 1 -n 16 -t 02:00:00'
        //clusterOptions='--ntasks-per-node=1 --export=NONE --export=NTHREADS --mem-bind=local'
    }*/

    withName: call_vep_annotation_final {
        executor = 'slurm'
        queue = 'parallel'
        cpus = 4
        memory = '12 GB'
        time = '3 h'
    }

    withName: prepare_vep_parse {
        conda = './env_ymls/watershed_vepenv.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 3
        memory = '10 GB'
        time = '2 h'
    }

    withName: parse_vep_annotation {
        conda = './env_ymls/watershed_vepenv.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 4
        memory = '14 GB'
        time = '3 h'
    }
}

process {
    withName: collapse_vep_annotation {
        executor = 'slurm'
        queue = 'parallel'
        cpus = 24
        memory = '100 GB'
        time = '10 h'
        //conda = './env_ymls/watershed_renv.yml'
    }

    withName: collapse_cadd_annotation {
        conda = './env_ymls/watershed_cadd_renv.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 14
        memory = '50 GB'
        time = '10 h'
    }

    withName: collapse_ucsc_annotation {
        executor = 'slurm'
        queue = 'parallel'
        cpus = 12
        memory = '40 GB'
        time = '10 h'
        //conda = './env_ymls/watershed_renv.yml'
    }

    withName: collapse_gencode_annotation {
        executor = 'slurm'
        queue = 'parallel'
        cpus = 12
        memory = '40 GB'
        time = '10 h'
        //conda = './env_ymls/watershed_renv.yml'
    }

    withName: collapse_afreq_annotation {
        conda = "${params.watershed_renv}"
        executor = 'slurm'
        queue = 'parallel'
        cpus = 14
        memory = '50 GB'
        time = '5 h'
        //conda = './env_ymls/watershed_renv.yml'
    }
}

process {
    withName: generate_n2_pairs {
        executor = 'slurm'
        queue = 'parallel'
        cpus = 8
        memory = '30 GB'
        time = '3 h'
        //conda = './env_ymls/watershed_renv.yml'
    }

    withName: merge_annotations_and_sortN2pair {
        conda = './env_ymls/watershed_mergeannotenv.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 8
        memory = '30 GB'
        time = '3 h'
    }

    withName: watershed_modelrun {
        conda = './env_ymls/watershed_modelenv.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 4
        memory = '15 GB'
        time = '4 h'
    }

    withName: process_merged_annotations {
        conda = './env_ymls/watershed_pyenv.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 4
        memory = '15 GB'
        time = '4 h'
    }
}


process {
    withName: splitvcfs_by_chrom {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 22
        memory = '75 GB'
        time = '4 h'
    }

    withName: filter_vcf_generegions_withgnomad {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 12
        memory = '40 GB'
        time = '15 h'
    }

    withName: filter_vcf_generegions {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 6
        memory = '20 GB'
        time = '6 h'
    }

    withName: subset_pop_and_qc {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 5
        memory = '16 GB'
        time = '4 h'
    }

    withName: filter_rare_variants_by_maf {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 5
        memory = '16 GB'
        time = '4 h'
    }

    withName: concat_rare_variants_vcf {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 12
        memory = '20 GB'
        time = '4 h'
    }

    withName: concat_rare_variants_bed {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 6
        memory = '20 GB'
        time = '4 h'
    }

    withName: identify_gnomad_common_variants {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 6
        memory = '20 GB'
        time = '20 h'
    }

    withName: identify_gnomad_common_variants_chromwise {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 8
        memory = '30 GB'
        time = '16 h'
    }

    withName: concat_gnomad_common_varaints_bed {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 6
        memory = '20 GB'
        time = '4 h'
    }

    withName: rarevars_map_to_genes {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 6
        memory = '20 GB'
        time = '5 h'
    }

    withName: rarevars_map_to_gene_indivs_format {
        executor = 'slurm'
        queue = 'parallel'
        cpus = 6
        memory = '20 GB'
        time = '4 h'
    }

    withName: convert_rare_variants_to_bed {
        executor = 'slurm'
        queue = 'parallel'
        cpus = 6
        memory = '20 GB'
        time = '5 h'
    }
}


process.cache = 'lenient'
//process.cache = 'true'
process {

    /*withName: VEP_RUN {
        module = ['java/19', 'samtools/1.15.1']
        conda = "/home/schhetr1/anaconda3/envs/eqtlgen"
        container = 'docker://ensemblorg/ensembl-vep'
        }*/
    
    /*withName: process_expr_data {
        module = ['java/19', 'samtools/1.15.1']
        conda = "/home/schhetr1/anaconda3/envs/eqtlgen"
        container = 'docker://ensemblorg/ensembl-vep'
        }*/
    
    withLabel: watershed_python_env {
        conda = "${params.watershed_pyenv}"
        }
    
    withLabel: watershed_r_env {
        conda = "${params.watershed_renv}"
        }

    withLabel: watershed_cadd_env {
        conda = "${params.watershed_caddenv}"
        }

    withLabel: watershed_env {
        conda = "${params.watershed_env}"
        }
    
    withLabel: peer_docker_env {
        //conda = "/home/schhetr1/anaconda3/envs/eqtlgen" // for singularity
        conda = "${params.watershed_env}" // for singularity
        container = 'docker://bryancquach/peer:1.3'
        containerOptions = { workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g)': null}
        }

    /*withLabel: vep_docker_env {
        conda = "${params.watershed_env}"
        container = 'docker://ensemblorg/ensembl-vep'
        //containerOptions = { workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g)': null}
        }*/

    withName: build_vep_cache {
        module = ['java/19', 'samtools/1.15.1']
        //conda = "${params.watershed_env}"
        container = 'docker://ensemblorg/ensembl-vep'
        }

    withName: build_vep_cache {
        //conda = "${params.watershed_env}"
        //container = 'docker://ensemblorg/ensembl-vep'
        executor = 'slurm'
        cpus = 3
        memory = '10 GB'
        time = '3 h'
        
    }

    /*withName: call_vep_annotation_test {
        module = ['java/19', 'samtools/1.15.1']
        //conda = "${params.watershed_env}"
        //conda = "/home/schhetr1/anaconda3/envs/eqtlgen"
        container = 'docker://ensemblorg/ensembl-vep'
        }

    withName: call_vep_annotation_final_test {
        conda = "${params.watershed_env}"
        container = 'docker://ensemblorg/ensembl-vep'

        executor = 'slurm'
        cpus = 4
        memory = '14 GB'
        time = '3.5 h' 
    }*/
}


process {
    withName: identify_samples_to_analyze {
        conda = './env_ymls/watershed_rv_env.yml'
        executor = 'slurm'
        queue = 'parallel'
        cpus = 4
        memory = '14 GB'
        time = '1 h'
    }

    withName:process_data {
        executor = 'slurm'
        queue = 'parallel'
        memory = '3.4 GB'
        time = '1h'
        cpus = 1
    }

    withName: split_population {
        executor = 'slurm'
        queue = 'parallel'
        memory = '3 GB'
        time = '1h'
        cpus = 1
    }

    withName: normalize_expression {
        conda = "${params.watershed_renv}"
        executor = 'slurm'
        queue = 'parallel'
        memory = '10 GB'
        time = '1h'
        cpus = 3
    }
    
    withName: compute_peerfactors {
        executor = 'slurm'
        queue = 'parallel'
        memory = '15 GB'
        time = '1.5h'
        cpus = 4
    }

    withName: compute_expr_residuals {
        executor = 'slurm'
        queue = 'parallel'
        memory = '15 GB'
        time = '2.5h'
        cpus = 4
    }

    withName: call_expr_outliers {
        executor = 'slurm'
        queue = 'parallel'
        memory = '15 GB'
        time = '3h'
        cpus = 4
    }

    withName: call_expr_outliers_only {
        executor = 'slurm'
        queue = 'parallel'
        memory = '15 GB'
        time = '3h'
        cpus = 4
    }

    withName: call_phylopscore_annotation {
        executor = 'slurm'
        queue = 'parallel'
        memory = '20 GB'
        time = '15h'
        cpus = 6
    }

    withName: call_gencode_annotation_final {
        executor = 'slurm'
        queue = 'parallel'
        memory = '50 GB'
        time = '3h'
        cpus = 14
    }

    withName: chromsplit_rv_file {
        executor = 'slurm'
        queue = 'parallel'
        memory = '10 GB'
        time = '1h'
        cpus = 3
    }

    withName: call_cadd_annotation {
        executor = 'slurm'
        queue = 'parallel'
        memory = '36 GB'
        time = '52h'
        cpus = 10
    }

}


/*
========================================================================================
    Custom environment variable setups
========================================================================================
*/


/*
env {
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
    PYTHONNOUSERSITE = 1
    }
*/



/*
========================================================================================
    Nextflow Metrics & Reports
========================================================================================
*/

timeline {
  overwrite = true
  enabled = true
  file    = "${params.out_dir}/outputs/reports_nxf/${params.cohort_name}/timeline.html"
}

report {
  overwrite = true
  enabled = true
  file    = "${params.out_dir}/outputs/reports_nxf/${params.cohort_name}/report.html"
}

trace {
  overwrite = true
  enabled = true
  fields  = 'task_id,name,status,exit,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar'
  file    = "${params.out_dir}/outputs/reports_nxf/${params.cohort_name}/trace.txt"
}
